#!/usr/bin/env node
/**
 * Generate TypeScript config files from .env
 * This script reads .env and generates auth-config.ts and env-config.ts
 */

const fs = require('fs');
const path = require('path');

// Load .env file
const envPath = path.join(__dirname, '..', '.env');

if (!fs.existsSync(envPath)) {
  console.error('❌ Error: .env file not found!');
  console.error('');
  console.error('Please create .env file from .env.example:');
  console.error('  1. Copy .env.example to .env');
  console.error('  2. Fill in your configuration values');
  console.error('');
  process.exit(1);
}

// Simple .env parser
const envContent = fs.readFileSync(envPath, 'utf8');
const env = {};

envContent.split('\n').forEach(line => {
  line = line.trim();
  
  // Skip empty lines and comments
  if (!line || line.startsWith('#')) {
    return;
  }
  
  // Parse KEY=VALUE
  const match = line.match(/^([^=]+)=(.*)$/);
  if (match) {
    const key = match[1].trim();
    let value = match[2].trim();
    
    // Remove quotes if present
    if ((value.startsWith('"') && value.endsWith('"')) || 
        (value.startsWith("'") && value.endsWith("'"))) {
      value = value.slice(1, -1);
    }
    
    env[key] = value;
  }
});

console.log('📝 Generating config files from .env...');

// Generate auth-config.ts
const authConfigContent = `/**
 * Microsoft Authentication Configuration
 * 
 * ⚠️ This file is auto-generated from .env by scripts/generate-config.js
 * DO NOT EDIT THIS FILE DIRECTLY - Edit .env instead
 */

export const AUTH_CONFIG = {
  // Azure Portal에서 복사한 Client ID
  AZURE_CLIENT_ID: '${env.AZURE_CLIENT_ID || 'YOUR_CLIENT_ID_HERE'}',
  
  // 리디렉션 URI - Azure Portal에도 이 주소를 등록해야 합니다!
  REDIRECT_URI: 'http://localhost:53682/callback',
};
`;

const authConfigPath = path.join(__dirname, '..', 'src', 'main', 'services', 'auth-config.ts');
fs.writeFileSync(authConfigPath, authConfigContent, 'utf8');
console.log('✅ Generated: src/main/services/auth-config.ts');

// Generate env-config.ts
const envConfigContent = `/**
 * Environment Configuration
 * 
 * ⚠️ This file is auto-generated from .env by scripts/generate-config.js
 * DO NOT EDIT THIS FILE DIRECTLY - Edit .env instead
 */

export const ENV_CONFIG = {
  // HyeniMC Worker URL (CurseForge API Proxy + Mod Distribution)
  HYENIMC_WORKER_URL: '${env.HYENIMC_WORKER_URL || ''}',
  
  // CurseForge API Key (optional, for development only)
  CURSEFORGE_API_KEY: '${env.CURSEFORGE_API_KEY || ''}',
};
`;

const envConfigPath = path.join(__dirname, '..', 'src', 'main', 'config', 'env-config.ts');
const envConfigDir = path.dirname(envConfigPath);

// Create directory if it doesn't exist
if (!fs.existsSync(envConfigDir)) {
  fs.mkdirSync(envConfigDir, { recursive: true });
}

fs.writeFileSync(envConfigPath, envConfigContent, 'utf8');
console.log('✅ Generated: src/main/config/env-config.ts');

// Generate server-config.ts
const authorizedDomains = env.AUTHORIZED_SERVER_DOMAINS || '';
const domainList = authorizedDomains
  .split(',')
  .map(d => d.trim())
  .filter(d => d.length > 0);

const serverConfigContent = `/**
 * Server Configuration
 * 
 * ⚠️ This file is auto-generated from .env by scripts/generate-config.js
 * DO NOT EDIT THIS FILE DIRECTLY - Edit .env instead
 */

/**
 * List of authorized server domains that trigger automatic mod management
 * Supports wildcard patterns (e.g., "*.example.com")
 */
export const AUTHORIZED_SERVER_DOMAINS: string[] = ${JSON.stringify(domainList, null, 2)};

/**
 * Check if a server address matches any authorized domain
 * @param serverAddress - Server address to check (e.g., "play.example.com" or "mc.example.com")
 * @returns true if the server is authorized
 */
export function isAuthorizedServer(serverAddress: string | undefined): boolean {
  if (!serverAddress?.trim()) {
    return false;
  }
  
  const normalized = serverAddress.toLowerCase().trim();
  
  return AUTHORIZED_SERVER_DOMAINS.some(pattern => {
    const patternLower = pattern.toLowerCase();
    
    // Exact match
    if (normalized === patternLower) {
      return true;
    }
    
    // Wildcard match: *.example.com matches sub.example.com
    if (patternLower.startsWith('*.')) {
      const domain = patternLower.substring(1); // Remove *
      return normalized.endsWith(domain);
    }
    
    return false;
  });
}
`;

const serverConfigPath = path.join(__dirname, '..', 'src', 'shared', 'config', 'server-config.ts');
const serverConfigDir = path.dirname(serverConfigPath);

// Create directory if it doesn't exist
if (!fs.existsSync(serverConfigDir)) {
  fs.mkdirSync(serverConfigDir, { recursive: true });
}

fs.writeFileSync(serverConfigPath, serverConfigContent, 'utf8');
console.log('✅ Generated: src/shared/config/server-config.ts');

// Validate required values
const errors = [];

if (!env.HYENIMC_WORKER_URL) {
  errors.push('HYENIMC_WORKER_URL is not set');
}

if (!env.AZURE_CLIENT_ID) {
  errors.push('AZURE_CLIENT_ID is not set');
}

if (!env.AUTHORIZED_SERVER_DOMAINS) {
  errors.push('AUTHORIZED_SERVER_DOMAINS is not set');
}

if (errors.length > 0) {
  console.warn('');
  console.warn('⚠️  Warning: Some required environment variables are missing:');
  errors.forEach(err => console.warn(`   - ${err}`));
  console.warn('');
  console.warn('Please update your .env file with the correct values.');
  console.warn('');
}

console.log('');
console.log('✨ Config generation complete!');
console.log('');
